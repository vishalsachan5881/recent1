TRIANGLE ROTATAION



#include<windows.h>
#include<GL/glu.h>
#include<GL/glut.h>
#include<stdio.h>
GLfloat R , px , py;
void myInit()
{
    glClearColor(0,0,0,1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,1,0,1);

}
void Draw()
{
    glClear(GL_COLOR_BUFFER_BIT);

    glColor3f(0,0,1);
    glBegin(GL_LINE_LOOP);
        glVertex2f(0.2,0.2);
        glVertex2f(0.8,0.2);
        glVertex2f(0.5,0.6);
    glEnd();

    glTranslatef(px,py,0);
    glRotatef(R,0,0,1);
    glTranslatef(-px,-py,0);

    glColor3f(1,0,0);
    glBegin(GL_LINE_LOOP);
        glVertex2f(0.2,0.2);
        glVertex2f(0.8,0.2);
        glVertex2f(0.5,0.6);
    glEnd();


    glFlush();
}

int main(int argc , char **argv)
{
    int ch;
    printf("Enter your Choice : \n");
    printf("1.Rotation about Origin\n2.Rotation about Point\n");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1 :px = 0 ;
                py = 0;
                printf("Enter the Rotation Angle : ");
                scanf("%f",&R);
                break;

        case 2 :printf("Enter the Rotation Reference Point [Pivot Point] \n");
                scanf("%f%f",&px,&py);
                printf("Enter the Rotation Angle : ");
                scanf("%f",&R);
                break;
    }


    glutInit(&argc , argv);
    glutInitWindowPosition(300,100);
    glutInitWindowSize(500,500);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
    glutCreateWindow("USN:184  House Rotation");

    myInit();
    glutDisplayFunc(Draw);
    glutMainLoop();
    return 0;
}






3 D GASKET



#include<windows.h>
#include<stdio.h>
#include<GL/glut.h>
int n;
void Triangle(GLfloat A[],GLfloat B[],GLfloat C[])
{
 glBegin(GL_TRIANGLES);
 glVertex3fv(A);
 glVertex3fv(B);
 glVertex3fv(C);
 glEnd();
}
void Tetra(GLfloat P1[],GLfloat P2[],GLfloat P3[],GLfloat P4[])
{
 glColor3f(1,1,1);
 Triangle(P1,P2,P3);
 glColor3f(0,1,0);
 Triangle(P1,P2,P4);
 glColor3f(0,0,1);
 Triangle(P2,P3,P4);
 glColor3f(1,0,0);
 Triangle(P1,P4,P3);
}
void Div(GLfloat P1[],GLfloat P2[],GLfloat P3[],GLfloat P4[],int n)
{
 GLfloat P12[3], P23[3], P31[3], P14[3], P24[3], P34[3];
 if(n>0)
 {
 P12[0] = (P1[0]+P2[0])/2;
 P12[1] = (P1[1]+P2[1])/2;
 P12[2] = (P1[2]+P2[2])/2;
 P23[0] = (P2[0]+P3[0])/2;
 P23[1] = (P2[1]+P3[1])/2;
 P23[2] = (P2[2]+P3[2])/2;
 P31[0] = (P3[0]+P1[0])/2;
 P31[1] = (P3[1]+P1[1])/2;
 P31[2] = (P3[2]+P1[2])/2;
 P14[0] = (P1[0]+P4[0])/2;
 P14[1] = (P1[1]+P4[1])/2;
 P14[2] = (P1[2]+P4[2])/2;
 P24[0] = (P2[0]+P4[0])/2;
 P24[1] = (P2[1]+P4[1])/2;
 P24[2] = (P2[2]+P4[2])/2;
 P34[0] = (P3[0]+P4[0])/2;
 P34[1] = (P3[1]+P4[1])/2;
 P34[2] = (P3[2]+P4[2])/2;

 Div(P1 ,P12,P31,P14,n-1);
 Div(P12,P2 ,P23,P24,n-1);
 Div(P31,P23,P3 ,P34,n-1);
 Div(P14,P24,P34,P4 ,n-1);
 }
 else
 Tetra(P1,P2,P3,P4);
}
void Display()
{
 GLfloat V[4][3] = {
 {-0.75 ,-0.5,-0.5},
 { 0.75 ,-0.5,-0.5},
 { 0 , 0.5,-0.5},
 { 0 ,-0.1, 0.5}
 };
 glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
 Div(V[0],V[1],V[2],V[3],n);
 glutSwapBuffers();
}
int main(int c,char *v[])
{
 printf("\n\tEnter Number of Divisions : ");
 scanf("%d",&n);
 glutInit(&c,v);
 glutInitDisplayMode(GLUT_RGB|GLUT_DOUBLE|GLUT_DEPTH);
 glutInitWindowSize(500,500);
 glutInitWindowPosition(100,100);
 glutCreateWindow("Lab-1: 3D Sierpinski Gasket");
 glutDisplayFunc(Display);
 glutMainLoop();
 return 0;
}





BRESENHAM




#include <GL/glu.h>
#include <GL/glut.h>
#include<math.h>

void myInit()
{
    glMatrixMode(GL_PROJECTION);    // by default it is modelview
    glLoadIdentity();
    gluOrtho2D(0,500,0,500);     //it is like a graph paper containing 1 st quadrant of the plane with the max value for coordinates mentioned
    glMatrixMode(GL_MODELVIEW);
}


void Draw()
{
    GLfloat x1 = 120 ,y1 = 50 ,x2 = 300  ,y2 = 350;
    GLfloat M ,p , x , y , dx , dy ,t;
    glClear(GL_COLOR_BUFFER_BIT);          //used to clear all the previous components on the window

    if(x2-x1 == 0)
    {
        M = (y2-y1);
    }
    else
    {
        M = (y2-y1)/(x2-x1);
    }

    if(fabs(M)<1)
    {
        if(x1>x2)
        {
            t = x1;
            x1 = x2;
            x2 = t;

            t = y1;
            y1= y2;
            y2 = t;
        }


        dx = fabs(x2-x1);
        dy = fabs(y2-y1);
        p = 2*dy - dx;

        x=x1;
        y=y1;

        glBegin(GL_POINTS);
            while(x<=x2)
            {
                glVertex2f(x,y);
                x = x+1;

                if(p>=1)
                {
                    if(M<1)
                    {
                        y=y+1;
                    }
                    else
                    {
                        y = y-1;
                    }
                    p = p + 2*dy - 2*dx;
                }
                else
                {
                    y = y;
                    p = p + 2*dy;
                }
            }

        glEnd();
    }

    if(fabs(M)>=1)
    {
        if(y1>y2)
        {
            t = x1;
            x1 = x2;
            x2 = t;

            t = y1;
            y1= y2;
            y2 = t;
        }


        dx = fabs(x2-x1);
        dy = fabs(y2-y1);
        p = 2*dx - dy;

        x=x1;
        y=y1;

        glBegin(GL_POINTS);
            while(y<=y2)
            {
                glVertex2f(x,y);
                y = y+1;

                if(p>=1)
                {
                    if(M>=1)
                    {
                        x=x+1;
                    }
                    else
                    {
                        x = x -1;
                    }
                    p = p + 2*dx - 2*dy;
                }
                else
                {
                    x = x;
                    p = p + 2*dx;
                }
            }

        glEnd();
    }

    glFlush();  //it will push the changes to th frame buffer and it will be reflected in the graphics window
}

int main(int C, char * V[])
{
    glutInit(&C,V);
    glutInitWindowPosition(500,100);
    glutInitWindowSize(500,500);
    glutInitDisplayMode( GLUT_RGB | GLUT_SINGLE );
    glutCreateWindow("Bresenham's Line Drawing Algorithm ");

    myInit();
    glutDisplayFunc(Draw);

    glutMainLoop();
    return 0 ;
}









CUBE SPIN




#include <GL/glu.h>
#include <GL/glut.h>
GLfloat T = 0;
GLint axis = 2;

void Spin()
{
    T = T+0.05;
    if(T > 360){
        T = 0;
    }
    glutPostRedisplay();        //UPDATED THE ROTATION TO REFLECT IT USE IT

}

void myinit()
{
    glClearColor(0,0,0,1);   //used to set background color
    glColor3f(1,0,0);        //used for drawing
    glEnable(GL_DEPTH_TEST);   //SET BUFFER WILL BE ENABLED AND THE BACK FACE WILL ALSO BE VISUALISED

}

void Face(GLfloat A[] , GLfloat B[] , GLfloat C[] , GLfloat D[] )
{
    glBegin(GL_POLYGON);
        glVertex3fv(A);             //by default the screen's coordinates max value is 1 (one)
        glVertex3fv(B);
        glVertex3fv(C);
        glVertex3fv(D);
    glEnd();
}


void Cube(GLfloat V0[], GLfloat V1[], GLfloat V2[], GLfloat V3[], GLfloat V4[], GLfloat V5[], GLfloat V6[], GLfloat V7[])
{
    glColor3f(1,0,0);
    Face(V0,V1,V2,V3);

    glColor3f(0,1,0);
    Face(V4,V5,V6,V7);

    glColor3f(0,0,1);
    Face(V0,V3,V7,V4);

    glColor3f(1,0,1);
    Face(V1,V2,V6,V5);

    glColor3f(1,1,0);
    Face(V0,V1,V5,V4);

    glColor3f(0,1,1);
    Face(V3,V2,V6,V7);
}



void Draw()
{
    GLfloat V[8][3] = {
                            {-0.5, 0.5, 0.5},
                            { 0.5, 0.5, 0.5},
                            { 0.5,-0.5, 0.5},
                            {-0.5,-0.5, 0.5},
                            {-0.5, 0.5,-0.5},
                            { 0.5, 0.5,-0.5},
                            { 0.5,-0.5,-0.5},
                            {-0.5,-0.5,-0.5}
                    };



    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);          //used to clear all the previous components on the window
                                                            //GL_DEPTH_BUFFER_BIT IS USED TO CLEAR DEPTH BUFFER

    glLoadIdentity();

    if(axis == 0)
    {
        glRotatef(T,1,0,0);
    }
    if(axis == 1)
    {
        glRotatef(T,0,1,0);
    }
    if(axis == 2)
    {
        glRotatef(T,0,0,1);
    }


    Cube(V[0],V[1],V[2],V[3],V[4],V[5],V[6],V[7]);


    glutSwapBuffers();                 //glFlush is not going to work with 3d so we use swapbuffers
    //glFlush();  //it will push the changes to th frame buffer and it will be reflected in the graphics window
}

void myReshape(int w,int h)
{
    glViewport(0,0,w,h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if(w<=h)
    glOrtho(-1.0,1.0,-1.0*(GLfloat)h/(GLfloat)w,1.0*(GLfloat)h/(GLfloat)w,-10.0,
    10.0);
    else
    glOrtho(-1.0*(GLfloat)w/(GLfloat)h,1.0*(GLfloat)w/(GLfloat)h,-1.0,1.0,-10.0,
    10.0);
    glMatrixMode(GL_MODELVIEW);
}


void mouse(int btn,int state,int x,int y)
{
    /*mousecallback,selectsanaxisaboutwhichtorotate*/
    if(btn==GLUT_LEFT_BUTTON&&state==GLUT_DOWN) axis=0;
    if(btn==GLUT_MIDDLE_BUTTON&&state==GLUT_DOWN) axis=1;
    if(btn==GLUT_RIGHT_BUTTON&&state==GLUT_DOWN) axis=2;
}



int main(int C, char * V[])
{
    glutInit(&C,V);
    glutInitWindowPosition(500,100);
    glutInitWindowSize(500,500);
    glutInitDisplayMode( GLUT_RGB | GLUT_DOUBLE |GLUT_DEPTH );                      //FOR 2D WE SHOULD USE SINGLE AND FOR 3 WE SHOULD USE DOUBLE
    glutCreateWindow("USN 184 ");                                       //DEPTH IS USE TO DEAL WITH HIDDEN OR BACK SURFACE

    myinit();
    glutReshapeFunc(myReshape);
    glutDisplayFunc(Draw);

    glutIdleFunc(Spin);                                  //callback function
    glutMouseFunc(mouse);                                                //used for calling userdefined spin function
    glutMainLoop();
    return 0 ;
}












CUBE PERSPECTIVE






#include <GL/glu.h>
#include <GL/glut.h>
GLfloat Cx = 0 , Cy = 0 , Cz = 3;

void myinit()
{
    glClearColor(0,0,0,1);   //used to set background color
    glEnable(GL_DEPTH_TEST);   //SET BUFFER WILL BE ENABLED AND THE BACK FACE WILL ALSO BE VISUALISED

    //FOR PERSPECTIVE VIEWING
    glMatrixMode(GL_PROJECTION);    // by default it is modelview
    glLoadIdentity();
    glFrustum(-1,1,-1,1,2,10);      //near should always be lesser than far
    glMatrixMode(GL_MODELVIEW);
}

void Face(GLfloat A[] , GLfloat B[] , GLfloat C[] , GLfloat D[] )
{
   glBegin(GL_POLYGON);
        glColor3f(1,0,0);
        glVertex3fv(A);
        glColor3f(0,1,0);
        glVertex3fv(B);
        glColor3f(0,0,1);
        glVertex3fv(C);
        glColor3f(1,1,0);
        glVertex3fv(D);
    glEnd();
}


void Cube(GLfloat V0[], GLfloat V1[], GLfloat V2[], GLfloat V3[], GLfloat V4[], GLfloat V5[], GLfloat V6[], GLfloat V7[])
{
    glColor3f(1,0,0);
    Face(V0,V1,V2,V3);

    glColor3f(0,1,0);
    Face(V4,V5,V6,V7);

    glColor3f(0,0,1);
    Face(V0,V3,V7,V4);

    glColor3f(1,0,1);
    Face(V1,V2,V6,V5);

    glColor3f(1,1,0);
    Face(V0,V1,V5,V4);

    glColor3f(0,1,1);
    Face(V3,V2,V6,V7);
}



void Draw()
{
    GLfloat V[8][3] = {
                            {-0.5, 0.5, 0.5},
                            { 0.5, 0.5, 0.5},
                            { 0.5,-0.5, 0.5},
                            {-0.5,-0.5, 0.5},
                            {-0.5, 0.5,-0.5},
                            { 0.5, 0.5,-0.5},
                            { 0.5,-0.5,-0.5},
                            {-0.5,-0.5,-0.5}
                    };



    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);          //used to clear all the previous components on the window
                                                            //GL_DEPTH_BUFFER_BIT IS USED TO CLEAR DEPTH BUFFER
    //for camera positioning
    glLoadIdentity();

    //drawText(0.8,0.8,"Vijay");

    gluLookAt(Cx,Cy,Cz,0,0,0,0,1,0);          //the value 5 is used bcoz it is between 2 to 10
    // here the first 3 coordinates are for camera position and the next three for looking at origin of the coordinate system and the next three for the up direction of the camera in this case it is y axis


    Cube(V[0],V[1],V[2],V[3],V[4],V[5],V[6],V[7]);


    glutSwapBuffers();                 //glFlush is not going to work with 3d so we use swapbuffers
    //glFlush();  //it will push the changes to th frame buffer and it will be reflected in the graphics window
}
/*
void drawText(float x , float y , char *s)
{
    int i = 0;
    glColor3f(1,1,0);
    glRasterPos2i(x,y);
    for(i=0;s[i]!='\0';i++)
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12,s[i]);
}

*/

void Key(unsigned char ch , int x , int y)
{
   switch(ch)
   {
       case 'x' : Cx=Cx-0.5;    break;
       case 'X' : Cx=Cx+0.5;    break;

       case 'y' : Cy=Cy-0.5;    break;
       case 'Y' : Cy=Cy+0.5;    break;

       case 'z' : Cz=Cz-0.5;    break;
       case 'Z' : Cz=Cz+0.5;    break;
   }
   glutPostRedisplay();
}


int main(int C, char * V[])
{

    glutInit(&C,V);
    glutInitWindowPosition(500,100);
    glutInitWindowSize(500,500);
    glutInitDisplayMode( GLUT_RGB | GLUT_DOUBLE |GLUT_DEPTH );                      //FOR 2D WE SHOULD USE SINGLE AND FOR 3 WE SHOULD USE DOUBLE
    glutCreateWindow("USN:188 Perspective Viewing");                                       //DEPTH IS USE TO DEAL WITH HIDDEN OR BACK SURFACE

    myinit();
    glutDisplayFunc(Draw);
    glutKeyboardFunc(Key);

                                     //callback function
                                                    //used for calling userdefined spin function
    glutMainLoop();
    return 0 ;
}










TRIANGLE ROTATE 2










#include<GL/glut.h> 
#include<math.h> 
#include<stdio.h> 
GLfloat d; 
GLfloat rX=0,rY=0; 
void Draw() 
{ 
 GLfloat P[3][2] = {{-0.5,0},{0.5,0},{0,0.6}}; 
 GLfloat nP[3][2],r; 
 int i; 
 glClear(GL_COLOR_BUFFER_BIT); 
 glColor3f(1,0,0); 
 glBegin(GL_LINE_LOOP); 
 glVertex2fv(P[0]); 
 glVertex2fv(P[1]); 
 glVertex2fv(P[2]); 
 glEnd(); 
 r = d * 3.14/180; 
 for(i=0;i<3;i++) 
 { 
 nP[i][0] = P[i][0]*cos(r)-P[i][1]*sin(r)-rX*cos(r)+rY*sin(r)+rX; 
 nP[i][1] = P[i][0]*sin(r)+P[i][1]*cos(r)-rX*sin(r)-rY*cos(r)+rY; 
 } 
 glColor3f(0,1,0); 
 glBegin(GL_LINE_LOOP); 
 glVertex2fv(nP[0]); 
 glVertex2fv(nP[1]); 
 glVertex2fv(nP[2]); 
 glEnd(); 
 glFlush(); 
} 
int main(int argC,char *argV[]) 
{ 
 printf("\nEnter the Pivot Point for Rotation : "); 
 scanf("%f%f",&rX,&rY); 
 printf("\nEnter the Degree of Rotation : "); 
 scanf("%f",&d); 
 glutInit(&argC,argV); 
 glutInitDisplayMode(GLUT_RGB|GLUT_SINGLE); 
 glutInitWindowPosition(0,0); 
 glutInitWindowSize(500,500); 
 glutCreateWindow("Lab-2"); 
 glutDisplayFunc(Draw); 
 glutIdleFunc(Spin); 
 glutMainLoop(); 
 return 0; 
}












